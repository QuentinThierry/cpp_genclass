#!/bin/bash

display_help()
{
	echo "Using 'genclass CppClass' will output two Orthodox Canonical classes named 'CppClass.cpp' and 'CppClass.hpp'."
	echo "Using 'genclass' with no arguments will create a 'main.cpp' base."
	echo "Using 'genclass --help' displays this message."
}

create_base_template()
{
	EXEC_PATH=$(type -a genclass | cut -d" " -f3 | grep -i "^/" | sed -n '1p' | sed 's|\(.*\)/.*|\1|')
	if ! test -f ./main.cpp; then
		cat $EXEC_PATH/main_cpp_template > ./main.cpp
	fi
	echo "Base template created"
}

create_single_class()
{
	EXEC_PATH=$(type -a genclass | cut -d" " -f3 | grep -i "^/" | sed -n '1p' | sed 's|\(.*\)/.*|\1|')
	CLASS_NO_PATH=$(echo "$1" | rev | cut -d'/' -f1 | rev)
	CLASS_PATH=$(echo "$1" | rev | cut -d'/' -f2- | rev)
	if [ "$CLASS_PATH" == "$CLASS_NO_PATH" ]
	then
		CLASS_PATH="."
	fi
	CLASS_BASE_NAME=$(echo "$CLASS_NO_PATH" | sed 's/\(.*\)\.cpp$/\1/;s/\(.*\)\.hpp$/\1/')

	if ! test -f ./$CLASS_BASE_NAME.cpp; then
		cat $EXEC_PATH/class_cpp_template | sed "s/ClassName/$CLASS_BASE_NAME/g" | sed "s/Class/$CLASS_BASE_NAME/g" > $CLASS_PATH/$CLASS_BASE_NAME.cpp
		if [ $? == 0 ]
		then
			echo "'$CLASS_PATH/$CLASS_BASE_NAME.cpp' created"
		fi
	else
		echo "'$CLASS_PATH/$CLASS_BASE_NAME.cpp' already exists"
	fi

	if ! test -f ./$CLASS_BASE_NAME.hpp; then
		cat $EXEC_PATH/class_hpp_template | sed "s/ClassName/$CLASS_BASE_NAME/g" | sed "s/CLASSNAME/${CLASS_BASE_NAME^^}/g" > $CLASS_PATH/$CLASS_BASE_NAME.hpp
		if [ $? == 0 ]
		then
			echo "'$CLASS_PATH/$CLASS_BASE_NAME.hpp' created"
		fi
	else
		echo "'$CLASS_PATH/$CLASS_BASE_NAME.hpp' already exists"
	fi
}

if [ $# == 1 ]
then
	if [ "$1" == "--help" ]
	then
		display_help
	elif [ ${1:0:1} == "-" ]
	then
		echo "[GENCLASS] Unknown option $1"
	else
		create_single_class "$1"
	fi
elif [ $# == 0 ]
then
	create_base_template
else
	echo "Invalid number of arguments."
fi
